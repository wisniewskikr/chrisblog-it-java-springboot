version: '3'

services:

  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - network
    
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - "8086:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka:9092
    # KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
    - network

  producer:
    image: producer
    container_name: producer
    build:
      context: ../../springboot3-kafka-obsidiandynamics-string_producer
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - network
    depends_on:
      - kafka
  
  consumer:
    image: consumer
    container_name: consumer
    build:
      context: ../../springboot3-kafka-obsidiandynamics-string_consumer
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    networks:
      - network
    depends_on:
      - kafka

networks:
  network:
    name: greeting-network